#!/bin/bash

usage(){
  echo "Usage (v1.0.6):"
  echo "  git size --csv --csv-headers --kilobytes DIRNAME"
  echo "  DIRNAME is optional - defaults to current directory"
  echo "  --csv or -c: output as csv format (optional)"
  echo "  --csv-headers or -H: header row for CSV output (optional)"
  echo "  --sunburst or -s: generate hyperlink for sunburst visual (optional)"
  echo "  --sunburst-html or -sh: generate HTML for sunburst visual (optional)"
  echo "  --absolute-paths or -ap: show absolute paths rather than relative (optional)"
  echo "  --recursive or -r: recurse looking for git clones/repos (always set for CSV output, optional)"
  echo "  --kilobytes or -k: kilobyte blocks instead of human units (always set for CSV output, optional)"
  exit 1
}

function kbytes_for_humans {
    local -i bytes=$1;
    if [[ $bytes -lt 1024 ]]; then
        echo "${bytes}"
    elif [[ $bytes -lt 1048576 ]]; then
        kbytes=$(echo "scale=1; $bytes / 1024" | bc | sed 's/\.0//')
        echo "${kbytes}K"
    elif [[ kbytes -lt 1073741824 ]]; then
        megs=$(echo "scale=1; $bytes / (1024^2)" | bc | sed 's/\.0//')
        echo "${megs}M"
    else
        gigs=$(echo "scale=1; $bytes / (1024^3)" | bc | sed 's/\.0//')
        echo "${gigs}G"
    fi
}

function sum_files {
    ssize="0"
    while read -r line; do
        if [[ !  -z  "$line"  ]]; then
            fsize=$(du -k -d0 "$line" | tail -1 | cut -f 1)
            ssize=$((ssize + fsize))
        fi
    done <<< "$1"
    echo $ssize
}

process_single () {
    dir="$1"
    cd "$orig_directory"
    if [ "$absolute_paths" -eq "1" ]; then
        dir=$(realpath "$dir")
    fi
    cd "$dir"

    # Can only go ahead if a git repo
    not_a_git_repo=$(git status . 2>&1 | grep "Not a git repository" | wc -l)
    if [ "$not_a_git_repo" -gt "0" ]; then
        echo "Directory $dir isn't a Git repository/clone, can't run 'git size' there"
        exit 1
    fi

    total_size=$(du $fmt -d0 . | cut -f 1 | sed 's/\.0//')

    git ls-files --ignored --exclude-standard -o | perl -ne 'chomp(); if (-e $_) {print "$_\n"}' > .ls-files
    ignoredWithSizes=$(find . -printf "%p %s\n" | grep -F -f .ls-files)
    size_of_ignored=$(echo "$ignoredWithSizes" | awk '{sum+=$2} END {print sum}')
    if [ "$fmt" == "-h" ]; then
        size_of_ignored=$(kbytes_for_humans $size_of_ignored)
    fi

    git ls-files | perl -ne 'chomp(); if (-e $_) {print "$_\n"}' > .ls-files
    checkoutWithSizes=$(find . -printf "%p %s\n" | grep -F -f .ls-files)
    size_of_checkout=$(echo "$checkoutWithSizes" | awk '{sum+=$2} END {print sum}')
    if [ "$fmt" == "-h" ]; then
        size_of_checkout=$(kbytes_for_humans $size_of_checkout)
    fi
    rm .ls-files

    size_of_dot_git_folder=$(du $fmt -d0 .git | tail -1 | cut -f 1 | sed 's/\.0//')

    if [ "$csv_format" -eq "0" ]; then
        if [ $fmt == "-k" ]; then
            format=" (KB)"
        else
            format=""
        fi
        echo "$dir: git size${format}:"
        echo "  .git folder: $size_of_dot_git_folder"
        echo "  checkout: $size_of_checkout"
        echo "  ignored: $size_of_ignored"
        echo "  total: $total_size"
    else
        if [ "$csv_hdrs" -eq "1" ]; then
            echo "directory_name,dot_git_folder_size,checkout_size,ignored_size,total_size"
        fi
        echo "\"$dir\",$size_of_dot_git_folder,$size_of_checkout,$size_of_ignored,$total_size"
    fi
}

recursive_or_single () {
    if [ "$recursive" -eq "1" ]; then
        csv_format="1"
        fmt="-k"
        if [ "$csv_hdrs" -eq "1" ]; then
            echo "directory_name,dot_git_folder_size,checkout_size,ignored_size,total_size"
            csv_hdrs="0"
        fi
        git_folders=$(find "$directory" -type d -name .git | sed 's#/\.git$##' | sed 's#^\./##')
        while read -r d2; do
            if [[ !  -z  "$d2"  ]]; then
                process_single "$d2"
            fi
        done <<< "$git_folders"
    else
      # non-recursive
      process_single $directory
    fi
}


orig_directory=$(pwd)
directory="."
csv_format="0"
fmt="-h"
recursive="0"
absolute_paths="0"
csv_hdrs="0"
sunburst="0"
sunburst_html="0"
leftOver=""
until [ -z $1 ]
    do
    if [ "$1" == "--csv" ] || [ "$1" == "-c" ]; then
        csv_format="1"
        fmt="-k"
        shift
    elif [ "$1" == "--kilobytes" ] || [ "$1" == "-k" ]; then
        fmt="-k"
        shift
    elif [ "$1" == "--recursive" ] || [ "$1" == "-r" ]; then
        recursive="1"
        shift
    elif [ "$1" == "--sunburst" ] || [ "$1" == "-s" ]; then
        sunburst="1"
        csv_hdrs="0"
        csv_format="1"
        shift
    elif [ "$1" == "--sunburst-html" ] || [ "$1" == "-sh" ]; then
        sunburst_html="1"
        sunburst="1"
        csv_hdrs="0"
        csv_format="1"
        shift
    elif [ "$1" == "--absolute-paths" ] || [ "$1" == "-ap" ]; then
        absolute_paths="1"
        shift
    elif [ "$1" == "--csv-headers" ] || [ "$1" == "-H" ]; then
        if [ "$sunburst" == "0" ]; then
            csv_hdrs="1"
        fi
        shift
    elif [ "$1" == "--help" ] || [ "$1" == "-h" ]; then
        usage
    else
        directory="$1"
        if [ ! -d "$directory" ]; then
            echo "Error, directory $directory not found"
            usage
        fi
        directory=$(echo "$directory" | sed 's#/$##')
        shift
        if [ "$#" -gt "0" ]; then
            leftOver="${leftOver} $@"
            break
        fi
    fi
done

if [ ! -z "${leftOver// }" ]; then
    echo "Unrecognized params/options: $leftOver"
    usage
fi
cd ..
if [ "$sunburst" -eq "1" ]; then
    if [ "$sunburst_html" -eq "1" ]; then
        echo "<html><body><a href=\""
    fi
    echo -n "https://paul-hammant.github.io/git-size/total.html#"
    recursive_or_single | base64 | tr -d '[\r\n]'
    echo ""
    if [ "$sunburst_html" -eq "1" ]; then
        echo "\">See Sunburst Chart</a></body></html>"
    fi
else
    recursive_or_single
fi